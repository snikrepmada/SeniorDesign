/**
  @page OV9655_Camera Camera example Readme file
  
  @verbatim
  ********************** Portions COPYRIGHT 2011 STMicroelectronics ************
  * @file    OV9655_Camera/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    30-September-2011
  * @brief   Description of the STM32F4xx camera example.
  ******************************************************************************
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  ******************************************************************************
  @endverbatim
  */
/**
  @page OV9655_Camera Camera example Readme file
 
  @verbatim
  **************** Portions COPYRIGHT 2012 Embest Tech. Co., Ltd.***************
  * @file    OV9655_Camera/readme.txt 
  * @author  CMP Team
  * @version V1.0.0
  * @date    28-December-2012
  * @brief   Description of the STM32F4xx camera example.
  *          Modified to support the STM32F4DISCOVERY, STM32F4DIS-BB, STM32F4DIS-CAM
  *          and STM32F4DIS-LCD modules. 
  ******************************************************************************
  * @attention
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, Embest SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT
  * OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION
  * CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  ******************************************************************************
  @endverbatim
  */
   
@par Example Description 
 
    This example shows how to use the DCMI to control the OV9655 Camera module(STM32F4DIS-CAM)
    Connetct with STM32F4DIS-BB board . 

    The OV955 camera (1.3 MegaPixel) is a low voltage CMOS device that provide the full
    functionality of a single-chip SXGA (1280x1024) camera and image processor in
    a small footprint package.

    This camera has an image array capable of operating at up to 15 frames per second 
    in SXGA resolution with complete user control over image quality, formatting and
    output data transfer. All required image processing functions are also programmable
    through the SCCB interface (I2C like protocol).

    In this example the DCMI is configured to interface with this 8 bit data camera
    in continuous mode. The I2C1 is used to configure the OV9655 in 8 bit RGB 5:6:5 mode. 
    The user can select between two resolutions QQVGA(160x120) or QVGA(320x240) in order 
    to display the captured image on the LCD(320x240), this selection is performed 
    in main.h file.
    All camera data received by the DCMI are transferred through the DMA and displayed
    on the LCD (connected to FSMC). As a result the CPU is free to execute other tasks.    


@par Directory contents

  - "inc": contains the project firmware header files    
    - inc/stm32f4xx_conf.h     Library Configuration file
    - inc/stm32f4xx_it.h       Interrupt handlers header file
    - inc/main.h               Header for main.c
    - inc/dcmi_ov9655.h        Header for DCMI_OV9655.c

  - "src": contains the project firmware source files
    - src/system_stm32f4xx.c   STM32F4xx system clock configuration file
    - src/stm32f4xx_it.c       Interrupt handlers
    - src/main.c               Main program
    - src/dcmi_ov9655.c        Driver for OV9655 Camera module


@note The "system_stm32f4xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F4xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN3988 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>


@par Hardware and Software environment 

  - This example has been tested with the following environment: 
     - STM32F4DISCOVERY board
     - STM32F4DIS-BB for the Base Board
     - STM32F4DIS-CAM for the Camera module
     - STM32F4DIS-LCD for the LCD module
     - TF card (2GB or less than 2GB Kingston or SanDisk TF Card is recommended. 
       It should be formatted before using)
	   
  - Software development tools
    - EWARM V6.40
    - MDK-ARM V4.60
	
  - Hardware Set-up 
     - Mount STM32F4DISCOVERY board onto STM32F4DIS-BB board through CON1 and CON2
     - Insert a TF card into microSD slot CON6.
     - Mount STM32F4DIS-LCD module onto STM32F4DIS-BB board through CON3
     - Connect STM32F4DIS-CAM CON1 to STM32F4DIS-BB CON7 via FFC soft cable when the power 
       is turned off. Please make sure that STM32F4DIS-CAM module is mounted correctly
     - Connect the STM32F4DISCOVERY board to a PC with a 'USB type A to Mini-B' cable 
       through USB connector CN1 to power the board.
    
     @note: The jumpers JP1 and JP2 must be OFF.


    
@par How to use it ? 

  In order to load the Project code, you have do the following:
   - EWARM
      - Open the Project.eww workspace
      - Rebuild all files: Project->Rebuild all
      - Load project image: Project->Debug
      - Run program: Debug->Go(F5)


   - MDK-ARM
      - Open the Project.uvproj project
      - Rebuild all files: Project->Rebuild all target files
      - Load project image: Debug->Start/Stop Debug Session
      - Run program: Debug->Run (F5)    

      


/*********** Portions COPYRIGHT 2012 Embest Tech. Co., Ltd.*****END OF FILE****/
